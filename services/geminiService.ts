
import { GoogleGenAI, GenerateContentResponse } from "@google/genai";
import { EtlStep, ProcessStatus } from '../types';
import {
  SYSTEM_INSTRUCTION,
  USER_PROMPT,
  MOCK_YAHOO_NEWS_RESPONSE,
  yahooNewsApiTool,
  slackPosterTool,
} from '../constants';

if (!process.env.API_KEY) {
    throw new Error("API_KEY environment variable is not set.");
}
const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

type ProgressCallback = (step: EtlStep, status: ProcessStatus, data?: any) => void;

export const runEtlProcess = async (progressCallback: ProgressCallback) => {
  
  // Step 1: EXTRACT
  progressCallback('extract', 'in-progress');
  const tools = [{ functionDeclarations: [yahooNewsApiTool, slackPosterTool] }];

  const model = "gemini-2.5-flash";

  let response: GenerateContentResponse = await ai.models.generateContent({
    model,
    contents: { role: 'user', parts: [{ text: USER_PROMPT }] },
    config: {
        systemInstruction: { role: 'model', parts: [{ text: SYSTEM_INSTRUCTION }] },
        tools,
    },
  });

  const firstFunctionCall = response.functionCalls?.[0];
  if (!firstFunctionCall || firstFunctionCall.name !== 'YahooNewsAPI') {
    throw new Error("Expected a function call to YahooNewsAPI, but didn't receive one.");
  }
  
  // Simulate API call and get mock data
  const yahooNewsData = MOCK_YAHOO_NEWS_RESPONSE;
  progressCallback('extract', 'completed', yahooNewsData);

  // Step 2: TRANSFORM
  progressCallback('transform', 'in-progress');
  
  const functionResponsePart = {
      functionResponse: {
        name: 'YahooNewsAPI',
        response: {
          content: JSON.stringify(yahooNewsData),
        },
      },
    };
    
  const chatHistory = [
      { role: 'user', parts: [{ text: USER_PROMPT }] },
      { role: 'model', parts: [{ functionCall: firstFunctionCall }] },
  ];

  response = await ai.models.generateContent({
    model,
    contents: [ ...chatHistory, { role: 'function', parts: [ functionResponsePart ] }],
    config: {
        systemInstruction: { role: 'model', parts: [{ text: SYSTEM_INSTRUCTION }] },
        tools,
    },
  });

  const secondFunctionCall = response.functionCalls?.[0];
  if (!secondFunctionCall || secondFunctionCall.name !== 'SlackPoster') {
    throw new Error("Expected a function call to SlackPoster, but didn't receive one.");
  }
  
  progressCallback('transform', 'completed', { 
    description: "Gemini has analyzed the news and generated the final Slack message.",
    functionCall: secondFunctionCall
  });

  // Step 3: LOAD
  progressCallback('load', 'in-progress');
  const slackMessage = secondFunctionCall.args.message;
  
  if (!slackMessage) {
    throw new Error("Slack message was not generated by the model.");
  }
  
  // Simulate posting to Slack
  await new Promise(resolve => setTimeout(resolve, 500));
  
  progressCallback('load', 'completed', slackMessage);
};

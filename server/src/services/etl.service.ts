import { GoogleGenAI, GenerateContentResponse } from "@google/genai";
import { SYSTEM_INSTRUCTION, USER_PROMPT, yahooNewsApiTool, slackPosterTool } from '../constants';
import { fetchAllNews } from './news.service';
import { readDb } from './db';

/**
 * Posts a message to the configured Slack webhook URL.
 * @param message The text message to post.
 * @returns A confirmation message.
 */
export async function postToSlack(message: string): Promise<string> {
    const SLACK_WEBHOOK_URL = process.env.SLACK_WEBHOOK_URL;
    if (!SLACK_WEBHOOK_URL) {
      console.warn('SLACK_WEBHOOK_URL is not set. Skipping actual Slack post.');
      return "Skipped: SLACK_WEBHOOK_URL not set.";
    }
  
    try {
      const response = await fetch(SLACK_WEBHOOK_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ text: message }),
      });
  
      if (!response.ok) {
        const errorText = await response.text();
        console.error(`Failed to post to Slack: ${response.status} - ${errorText}`);
        throw new Error(`Failed to post to Slack: ${response.status}`);
      }
      console.log('Message successfully posted to Slack.');
      return "Message successfully posted to Slack.";
    } catch (error) {
      console.error('Error posting to Slack:', error);
      throw new Error('Error posting to Slack.');
    }
}

/**
 * Fetches news, has Gemini analyze it, and returns the generated summary.
 * This function does NOT post to Slack.
 * @returns An object containing the extracted news data and the generated summary.
 */
export async function generateSummary() {
    if (!process.env.GEMINI_API_KEY) {
        throw new Error("GEMINI_API_KEY environment variable is not set.");
    }
    const ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY });
    const model = "gemini-2.5-flash";

    const { newsSources } = await readDb();
    if (newsSources.length === 0) {
        throw new Error('No news sources are configured. Please add at least one RSS feed to proceed.');
    }

    const tools = [{ functionDeclarations: [yahooNewsApiTool, slackPosterTool] }];
    
    let response: GenerateContentResponse = await ai.models.generateContent({
      model,
      contents: { role: 'user', parts: [{ text: USER_PROMPT }] },
      config: {
          systemInstruction: { role: 'model', parts: [{ text: SYSTEM_INSTRUCTION }] },
          tools,
      },
    });

    const firstFunctionCall = response.functionCalls?.[0];
    if (!firstFunctionCall || firstFunctionCall.name !== 'YahooNewsAPI') {
      throw new Error("Expected a function call to YahooNewsAPI, but didn't receive one.");
    }

    const newsData = await fetchAllNews();

    if (newsSources.length > 0 && (!newsData || newsData.news.length === 0)) {
        throw new Error('No news articles could be fetched from the configured sources. Please check the RSS feed URLs.');
    }
    
    const functionResponsePart = {
        functionResponse: {
          name: 'YahooNewsAPI',
          response: { content: JSON.stringify(newsData) },
        },
      };
      
    const chatHistory = [
        { role: 'user', parts: [{ text: USER_PROMPT }] },
        { role: 'model', parts: [{ functionCall: firstFunctionCall }] },
    ];

    response = await ai.models.generateContent({
      model,
      contents: [ ...chatHistory, { role: 'function', parts: [ functionResponsePart ] }],
      config: {
          systemInstruction: { role: 'model', parts: [{ text: SYSTEM_INSTRUCTION }] },
          tools,
      },
    });

    // --- DEBUG LOGGING ---
    console.log('--- Gemini Response (Part 2) ---');
    console.log(JSON.stringify(response, null, 2));
    // --- END DEBUG LOGGING ---

    const secondFunctionCall = response.candidates?.[0]?.content?.parts?.[0]?.functionCall;
    if (!secondFunctionCall || secondFunctionCall.name !== 'SlackPoster') {
      console.error("Error: Expected a function call to SlackPoster, but didn't receive one.");
      throw new Error("Expected a function call to SlackPoster, but didn't receive one.");
    }

    const slackMessage = secondFunctionCall.args?.message;
    if (typeof slackMessage !== 'string' || !slackMessage) {
      console.error("Error: Slack message was not generated by the model.");
      throw new Error("Slack message was not generated by the model.");
    }

    return {
        extract: newsData,
        transform: {
            description: "Gemini has analyzed the news and generated the final Slack message.",
            functionCall: secondFunctionCall
        },
        summary: slackMessage,
    };
}


/**
 * Runs the full ETL process from start to finish, including posting to Slack.
 * This is intended for use by the scheduler.
 */
export async function runEtlProcess() {
    const result = await generateSummary();
    const slackPostResult = await postToSlack(result.summary);

    return {
        ...result,
        load: result.summary,
        slackPostResult: slackPostResult,
    };
}
